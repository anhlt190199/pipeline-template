---
include:
  - project: c2/hll21054-hll-hello-kyc/operation-2023/pipeline-template
    ref: ft/sonarqube
    file:
      - 'docker/docker.gitlab-ci.yml'
      - 'build/build.gitlab-ci.yml'

.rule_develop: &rule_develop
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH != "develop"'
      when: never

.disable_sonarqube: &disable_sonarqube
  rules:
    - if: '$CI_DISABLE_SONARQUBE == "true"'
      when: never

.disable_dependency_check: &disable_dependency_check
  rules:
    - if: '$CI_DISABLE_DEPENDENCY_CHECK == "true"'
      when: never

.artifact: &artifact
  artifacts:
    paths:
      - $CI_PROJECT_DIR/.sonarqube

dependency-check:
  extends:
    - .docker_templates
    - .tags_template
  stage: dependency-check
  image: owasp/dependency-check
  services: null
  variables:
    DEPENDENCY_CHECK_REPORT_PATH: $CI_PROJECT_DIR/.dependency-check
    DEPENDENCY_CHECK_REPORT_FORMAT: "ALL"
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --scan $CI_PROJECT_DIR --format ALL --out $DEPENDENCY_CHECK_REPORT_PATH
  allow_failure: true
  rules:
    - !reference [.rule_develop, rules]
    - !reference [.disable_dependency_check, rules]
  artifacts:
    paths:
      - $DEPENDENCY_CHECK_REPORT_PATH
    reports:
      dependency_scanning: $DEPENDENCY_CHECK_REPORT_PATH/dependency-check-report.xml

sonarqube-scan:
  extends:
    - .docker_templates
    - .tags_template
  stage: sonarqube-scan
  image: sonarsource/sonar-scanner-cli
  services: null
  variables:                             # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_SCANNER_OPTS: "-Dsonar.projectKey=$CI_PROJECT_NAME"
    WORKSPACE: ".dependency-check"
  script:
    - sonar-scanner
  allow_failure: true
  rules:
    - !reference [.rule_develop, rules]
    - !reference [.disable_sonarqube, rules]
  <<: *artifact