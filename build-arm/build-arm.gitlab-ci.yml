# include:
#   - project: c2/hll21054-hll-hello-kyc/operation-2023/pipeline-template
#     ref: main
#     file:
#       - 'build/build.gitlab-ci.yml'

.image_info_template_arm: &image_info_template_arm
  script:
    - APPLICATION=$CI_PROJECT_NAME
    - VERSION=$ENV-$(git rev-parse --short HEAD)
    - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$ENV
    - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$VERSION
    - ECR_REPO=$DOCKER_REGISTRY_HOST/$APPLICATION
.docker_templates_arm:
  variables:
    # common variable
    DOCKER_HOST: tcp://localhost:2375
  image:
    name: ladung/node16-buildkit12:docker-aws-arm
  artifacts:
    paths:
      - dist
.script_template_arm:
  script:
    # const
    - !reference [.image_info_template_arm, script]
    # lint & pre-build
    - yarn
    - yarn lint
    - yarn build:$ENV
    # - docker pull $IMAGE_FIX || true
    # - >
    #   docker build --cache-from=$IMAGE_FIX
    #   -t $IMAGE_FIX -f .docker/$ENV.dockerfile .
    - ls -la
    - ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
    - >
      aws ecr get-login-password --region $AWS_DEFAULT_REGION |
      docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST
    # - buildctl --addr tcp://buildkitd:1234 build --frontend dockerfile.v0 --opt platform=linux/amd64,linux/arm64 --local context=. --local dockerfile=. --opt filename=.docker/dev.dockerfile --output type=image,name=$IMAGE_FIX,push=true
    - >
      buildctl --addr tcp://buildkitd:1234 
      build --frontend dockerfile.v0 --opt platform=linux/arm64 --local context=. --local dockerfile=. 
      --opt filename=.docker/dev.dockerfile --export-cache type=local,dest=/data/cache --import-cache type=registry,ref=$IMAGE_FIX
      --output type=image,name=$ECR_REPO:arm64-$VERSION,push=true
    - >
      buildctl --addr tcp://buildkitd:1234   
      build --frontend dockerfile.v0 --opt platform=linux/amd64 --local context=. --local dockerfile=. 
      --opt filename=.docker/dev.dockerfile --export-cache type=local,dest=/data/cache --import-cache type=registry,ref=$IMAGE_FIX
      --output type=image,name=$ECR_REPO:amd64-$VERSION,push=true
    # - docker manifest create $IMAGE_BACKUP $IMAGE_BACKUP-arm $IMAGE_BACKUP-amd
    # - docker manifest push $IMAGE_BACKUP
    - apk add curl
    - curl -L -o manifest-tool.tar.gz https://github.com/estesp/manifest-tool/releases/download/v2.0.8/binaries-manifest-tool-2.0.8.tar.gz
    - tar -xvf manifest-tool.tar.gz
    - >-
      ./manifest-tool-linux-arm64
      --username=AWS
      --password=$ECR_PASSWORD
      push from-args
      --platforms linux/amd64,linux/arm64
      --template $ECR_REPO:ARCH-$VERSION
      --target $IMAGE_BACKUP



.tags_template_arm: &tags_template_arm
  tags:
    - hll-runner-core-arm

.rules_template_arm: &rules_template_arm
  rules:
    - if: '$CI_COMMIT_BRANCH == "dungla"'
      when: always
    # - if: '$CI_COMMIT_BRANCH != "deployment/dev"
    #       || $CI_COMMIT_BRANCH != "deployment/staging"
    #       || $CI_COMMIT_BRANCH != "master"'
    #   when: never

.before_script_template_arm: &before_script_template_arm
  before_script:
    - if [ "$CI_COMMIT_BRANCH" == "dungla" ]; then ENV="dev"; fi
    # - if [ "$CI_COMMIT_BRANCH" == "deployment/staging" ]; then ENV="staging"; fi
    # - if [ "$CI_COMMIT_BRANCH" == "master" ]; then ENV="production"; fi


.build_arm:
  extends:
    - .docker_templates_arm
    - .before_script_template_arm
    - .rules_template_arm
    - .tags_template_arm
    - .script_template_arm