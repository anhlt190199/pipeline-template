include:
  - project: c2/hll21054-hll-hello-kyc/operation-2023/pipeline-template
    ref: main
    file:
      - 'build/build.gitlab-ci.yml'

.image_info_template_arm: &image_info_template_arm
  script:
    - if [ "$CI_COMMIT_BRANCH" == "deployment/dev-v2" ]; then APPLICATION=$CI_PROJECT_NAME-v2; else APPLICATION=$CI_PROJECT_NAME; fi
    - if [ "$CI_COMMIT_BRANCH" == "deployment/staging-v2" ]; then APPLICATION=$CI_PROJECT_NAME-v2; else APPLICATION=$CI_PROJECT_NAME; fi
    - VERSION=$ENV-$(git rev-parse --short HEAD)
    - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$ENV-arm64
    - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$VERSION
    - ECR_REPO=$DOCKER_REGISTRY_HOST/$APPLICATION
.docker_templates_arm: &docker_templates_arm
  variables:
    # common variable
    DOCKER_HOST: tcp://localhost:2375
  image:
    name: public.ecr.aws/o0k0x2h7/ci-node:v16-bullseye-buildkit12-gitops
  artifacts:
    paths:
      - dist

.docker_login_arm: &docker_login_arm
  script:
    - ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
    - >
      aws ecr get-login-password --region $AWS_DEFAULT_REGION |
      docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST

.script_template_arm: &script_template_arm
  script:
    # const
    - !reference [.image_info_template_arm, script]
    # lint & pre-build
    - yarn
    - yarn lint
    - yarn build:$ENV
    - !reference [.docker_login_arm, script]
    - export platforms=arm64
    - >
      buildctl --addr tcp://buildkitd:1234 
      build --frontend dockerfile.v0 --local context=. --local dockerfile=. 
      --opt filename=.docker/$ENV.dockerfile --export-cache type=local,dest=/data/cache --import-cache type=registry,ref=$IMAGE_FIX
      --output type=image,\"name=$ECR_REPO:arm64-$VERSION,$IMAGE_FIX\",push=true
    # - >
    #   buildctl --addr tcp://buildkitd:1234   
    #   build --frontend dockerfile.v0 --opt platform=linux/amd64 --local context=. --local dockerfile=. 
    #   --opt filename=.docker/dev.dockerfile
    #   --output type=image,name=$IMAGE_BACKUP,push=true
    # - apk add curl
    # - curl -L -o manifest-tool.tar.gz https://github.com/estesp/manifest-tool/releases/download/v2.0.8/binaries-manifest-tool-2.0.8.tar.gz
    # - tar -xvf manifest-tool.tar.gz
    # - >-
    #   ./manifest-tool-linux-arm64
    #   --username=AWS
    #   --password=$ECR_PASSWORD
    #   push from-args
    #   --platforms linux/amd64,linux/arm64
    #   --template $ECR_REPO:ARCH-$VERSION
    #   --target $IMAGE_BACKUP

.caching_template: &caching_template
  cache:
    key:
      files:
        - package.json
    paths:
      - node_modules/
    # https://docs.gitlab.com/ee/ci/yaml/#cachepolicy
    policy: pull-push

.tags_template_arm: &tags_template_arm
  tags:
    - hll-runner-core-arm

.rules_template_arm: &rules_template_arm
  before_script:
    - if [ "$CI_COMMIT_BRANCH" == "deployment/dev" ]; then ENV="dev"; fi
    - if [ "$CI_COMMIT_BRANCH" == "deployment/dev-v2" ]; then ENV="dev"; fi
    - if [ "$CI_COMMIT_BRANCH" == "deployment/staging-v2" ]; then ENV="staging"; fi
    - if [ "$CI_COMMIT_BRANCH" == "deployment/staging" ]; then ENV="staging"; fi
    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then ENV="production"; fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "deployment/dev"
          || $CI_COMMIT_BRANCH == "deployment/dev-v2"
          || $CI_COMMIT_BRANCH == "deployment/staging"
          || $CI_COMMIT_BRANCH == "deployment/staging-v2"
          || $CI_COMMIT_BRANCH == "master"'
      when: always
    - if: '$CI_COMMIT_BRANCH != "deployment/dev"
          || $CI_COMMIT_BRANCH != "deployment/dev-v2"
          || $CI_COMMIT_BRANCH != "deployment/staging"
          || $CI_COMMIT_BRANCH != "deployment/staging-v2"
          || $CI_COMMIT_BRANCH != "master"'
      when: never

.before_script_template_arm: &before_script_template_arm
  before_script:
    - echo "tests"
    # - if [ "$CI_COMMIT_BRANCH" == "deployment/dev" ]; then ENV="dev"; fi
    # - if [ "$CI_COMMIT_BRANCH" == "deployment/staging" ]; then ENV="staging"; fi
    # - if [ "$CI_COMMIT_BRANCH" == "master" ]; then ENV="production"; fi

.script_manifest_multi_arch: &script_manifest_multi_arch
  image:
    name: public.ecr.aws/o0k0x2h7/ci-node:v16-gitops
  script: 
    - !reference [.image_info_template_arm, script]
    - !reference [.docker_login_arm, script]
    - apk add curl
    - curl -L -o manifest-tool.tar.gz https://github.com/estesp/manifest-tool/releases/download/v2.0.8/binaries-manifest-tool-2.0.8.tar.gz
    - tar -xvf manifest-tool.tar.gz
    - >-
      ./manifest-tool-linux-arm64
      --username=AWS
      --password=$ECR_PASSWORD
      push from-args
      --platforms linux/amd64,linux/arm64
      --template $ECR_REPO:ARCH-$VERSION
      --target $IMAGE_BACKUP


.build_arm:
  extends:
    - .docker_templates_arm
    - .before_script_template_arm
    - .caching_template
    - .rules_template_arm
    - .tags_template_arm
    - .script_template_arm

.push_multi_arch:
  extends: 
    - .tags_template_arm
    - .rules_template_arm
    - .script_manifest_multi_arch